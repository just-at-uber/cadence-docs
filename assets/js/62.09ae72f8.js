(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{446:function(e,t,a){"use strict";a.r(t);var r=a(8),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"command-line-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[e._v("#")]),e._v(" Command Line Interface")]),e._v(" "),a("p",[e._v("The Cadence "),a("Term",{attrs:{term:"CLI"}}),e._v(" is a command-line tool you can use to perform various "),a("Term",{attrs:{term:"task",show:"tasks"}}),e._v(" on a Cadence server. It can perform\n"),a("Term",{attrs:{term:"domain"}}),e._v(" operations such as register, update, and describe as well as "),a("Term",{attrs:{term:"workflow"}}),e._v(" operations like start\n"),a("Term",{attrs:{term:"workflow"}}),e._v(", show "),a("Term",{attrs:{term:"workflow"}}),e._v(" history, and "),a("Term",{attrs:{term:"signal"}}),e._v(" "),a("Term",{attrs:{term:"workflow"}}),e._v(".")],1),e._v(" "),a("h2",{attrs:{id:"using-the-cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-the-cli"}},[e._v("#")]),e._v(" Using the CLI")]),e._v(" "),a("p",[e._v("The Cadence "),a("Term",{attrs:{term:"CLI"}}),e._v(" can be used directly from the Docker Hub image "),a("em",[e._v("ubercadence/cli")]),e._v(" or by building the "),a("Term",{attrs:{term:"CLI"}}),e._v(" tool\nlocally.")],1),e._v(" "),a("p",[e._v("Example of using the docker image to describe a "),a("Term",{attrs:{term:"domain",show:""}})],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run --rm ubercadence/cli:master --domain samples-domain domain describe\n")])])]),a("p",[e._v('On Docker versions 18.03 and later, you may get a "connection refused" error. You can work around this by setting the host to "host.docker.internal" (see '),a("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(" for more info).")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("docker run --rm ubercadence/cli:master --address host.docker.internal:7933 --domain samples-domain domain describe\n")])])]),a("p",[e._v("To build the "),a("Term",{attrs:{term:"CLI"}}),e._v(" tool locally, clone the "),a("a",{attrs:{href:"https://github.com/uber/cadence",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cadence server repo"),a("OutboundLink")],1),e._v(" and run\n"),a("code",[e._v("make bins")]),e._v(". This produces an executable called "),a("code",[e._v("cadence")]),e._v(". With a local build, the same command to\ndescribe a "),a("Term",{attrs:{term:"domain"}}),e._v(" would look like this:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence --domain samples-domain domain describe\n")])])]),a("p",[e._v("The example commands below will use "),a("code",[e._v("./cadence")]),e._v(" for brevity.")]),e._v(" "),a("h2",{attrs:{id:"environment-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#environment-variables"}},[e._v("#")]),e._v(" Environment variables")]),e._v(" "),a("p",[e._v("Setting environment variables for repeated parameters can shorten the "),a("Term",{attrs:{term:"CLI"}}),e._v(" commands.")],1),e._v(" "),a("ul",[a("li",[a("strong",[e._v("CADENCE_CLI_ADDRESS")]),e._v(" - host:port for Cadence frontend service, the default is for the local server")]),e._v(" "),a("li",[a("strong",[e._v("CADENCE_CLI_DOMAIN")]),e._v(" - default "),a("Term",{attrs:{term:"workflow"}}),e._v(" "),a("Term",{attrs:{term:"domain"}}),e._v(", so you don't need to specify "),a("code",[e._v("--domain")])],1)]),e._v(" "),a("h2",{attrs:{id:"quick-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-start"}},[e._v("#")]),e._v(" Quick Start")]),e._v(" "),a("p",[e._v("Run "),a("code",[e._v("./cadence")]),e._v(" for help on top level commands and global options\nRun "),a("code",[e._v("./cadence domain")]),e._v(" for help on "),a("Term",{attrs:{term:"domain"}}),e._v(" operations\nRun "),a("code",[e._v("./cadence workflow")]),e._v(" for help on "),a("Term",{attrs:{term:"workflow"}}),e._v(" operations\nRun "),a("code",[e._v("./cadence tasklist")]),e._v(" for help on tasklist operations\n("),a("code",[e._v("./cadence help")]),e._v(", "),a("code",[e._v("./cadence help [domain|workflow]")]),e._v(" will also print help messages)")],1),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" make sure you have a Cadence server running before using "),a("Term",{attrs:{term:"CLI"}})],1),e._v(" "),a("h3",{attrs:{id:"domain-operation-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#domain-operation-examples"}},[e._v("#")]),e._v(" Domain operation examples")]),e._v(" "),a("ul",[a("li",[e._v("Register a new "),a("Term",{attrs:{term:"domain"}}),e._v(' named "samples-domain":')],1)]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence --domain samples-domain domain register --global_domain "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OR using short alias")]),e._v("\n./cadence --do samples-domain d re --gd "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),a("ul",[a("li",[e._v('View "samples-domain" details:')])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence --domain samples-domain domain describe\n")])])]),a("h3",{attrs:{id:"workflow-operation-examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workflow-operation-examples"}},[e._v("#")]),e._v(" Workflow operation examples")]),e._v(" "),a("p",[e._v("The following examples assume the CADENCE_CLI_DOMAIN environment variable is set.")]),e._v(" "),a("h4",{attrs:{id:"run-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-workflow"}},[e._v("#")]),e._v(" Run workflow")]),e._v(" "),a("p",[e._v("Start a "),a("Term",{attrs:{term:"workflow"}}),e._v(" and see its progress. This command doesn't finish until "),a("Term",{attrs:{term:"workflow"}}),e._v(" completes.")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow run --tl helloWorldGroup --wt main.Workflow --et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# view help messages for workflow run")]),e._v("\n./cadence workflow run -h\n")])])]),a("p",[e._v("Brief explanation:\nTo run a "),a("Term",{attrs:{term:"workflow"}}),e._v(", the user must specify the following:")],1),e._v(" "),a("ol",[a("li",[e._v("Tasklist name (--tl)")]),e._v(" "),a("li",[e._v("Workflow type (--wt)")]),e._v(" "),a("li",[e._v("Execution start to close timeout in seconds (--et)")]),e._v(" "),a("li",[e._v("Input in JSON format (--i) (optional)")])]),e._v(" "),a("p",[e._v("s example uses "),a("a",{attrs:{href:"https://github.com/uber-common/cadence-samples/blob/master/cmd/samples/recipes/helloworld/helloworld_workflow.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("this cadence-samples workflow"),a("OutboundLink")],1),e._v("\nand takes a string as input with the "),a("code",[e._v("-i '\"cadence\"'")]),e._v(" parameter. Single quotes ("),a("code",[e._v("''")]),e._v(") are used to wrap input as JSON.")]),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" You need to start the "),a("Term",{attrs:{term:"worker"}}),e._v(" so that the "),a("Term",{attrs:{term:"workflow"}}),e._v(" can make progress.\n(Run "),a("code",[e._v("make && ./bin/helloworld -m worker")]),e._v(" in cadence-samples to start the "),a("Term",{attrs:{term:"worker"}}),e._v(")")],1),e._v(" "),a("h4",{attrs:{id:"show-running-workers-of-a-tasklist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-running-workers-of-a-tasklist"}},[e._v("#")]),e._v(" Show running workers of a tasklist")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence tasklist desc --tl helloWorldGroup\n")])])]),a("h4",{attrs:{id:"start-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-workflow"}},[e._v("#")]),e._v(" Start workflow")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow start --tl helloWorldGroup --wt main.Workflow --et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# view help messages for workflow start")]),e._v("\n./cadence workflow start -h\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for a workflow with multiple inputs, separate each json with space/newline like")]),e._v("\n./cadence workflow start --tl helloWorldGroup --wt main.WorkflowWith3Args --et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'"your_input_string" 123 {"Name":"my-string", "Age":12345}\'')]),e._v("\n")])])]),a("p",[e._v("The "),a("Term",{attrs:{term:"workflow"}}),e._v(" "),a("code",[e._v("start")]),e._v(" command is similar to the "),a("code",[e._v("run")]),e._v(" command, but immediately returns the workflow_id and\nrun_id after starting the "),a("Term",{attrs:{term:"workflow"}}),e._v(". Use the "),a("code",[e._v("show")]),e._v(" command to view the "),a("Term",{attrs:{term:"workflow"}}),e._v("'s history/progress.")],1),e._v(" "),a("h5",{attrs:{id:"reuse-the-same-workflow-id-when-starting-running-a-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reuse-the-same-workflow-id-when-starting-running-a-workflow"}},[e._v("#")]),e._v(" Reuse the same workflow id when starting/running a workflow")]),e._v(" "),a("p",[e._v("Use option "),a("code",[e._v("--workflowidreusepolicy")]),e._v(" or "),a("code",[e._v("--wrp")]),e._v(" to configure the "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" reuse policy.\n"),a("strong",[e._v("Option 0 AllowDuplicateFailedOnly:")]),e._v(" Allow starting a "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(" using the same "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" when a "),a("Term",{attrs:{term:"workflow"}}),e._v(" with the same "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" is not already running and the last execution close state is one of "),a("em",[e._v("[terminated, cancelled, timedout, failed]")]),e._v(".\n"),a("strong",[e._v("Option 1 AllowDuplicate:")]),e._v(" Allow starting a "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(" using the same "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" when a "),a("Term",{attrs:{term:"workflow"}}),e._v(" with the same "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" is not already running.\n"),a("strong",[e._v("Option 2 RejectDuplicate:")]),e._v(" Do not allow starting a "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(" using the same "),a("Term",{attrs:{term:"workflow_ID"}}),e._v(" as a previous "),a("Term",{attrs:{term:"workflow"}}),e._v(".")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use AllowDuplicateFailedOnly option to start a workflow")]),e._v("\n./cadence workflow start --tl helloWorldGroup --wt main.Workflow --et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" --wid "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<duplicated workflow id>"')]),e._v(" --wrp "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use AllowDuplicate option to run a workflow")]),e._v("\n./cadence workflow run --tl helloWorldGroup --wt main.Workflow --et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" --wid "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<duplicated workflow id>"')]),e._v(" --wrp "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),a("h5",{attrs:{id:"start-a-workflow-with-a-memo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-a-workflow-with-a-memo"}},[e._v("#")]),e._v(" Start a workflow with a memo")]),e._v(" "),a("p",[e._v("Memos are immutable key/value pairs that can be attached to a "),a("Term",{attrs:{term:"workflow"}}),e._v(" run when starting the "),a("Term",{attrs:{term:"workflow"}}),e._v(". These are\nvisible when listing "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(". More information on memos can be found\n"),a("RouterLink",{attrs:{to:"/docs/concepts/search-workflows/#memo-vs-search-attributes"}},[e._v("here")]),e._v(".")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cadence wf start -tl helloWorldGroup -wt main.Workflow -et "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("60")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"cadence\"'")]),e._v(" -memo_key ‘“Service” “Env” “Instance”’ -memo ‘“serverName1” “test” "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v("’\n")])])]),a("h4",{attrs:{id:"show-workflow-history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-workflow-history"}},[e._v("#")]),e._v(" Show workflow history")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow show -w 3ea6b242-b23c-4279-bb13-f215661b4717 -r 866ae14c-88cf-4f1e-980f-571e031d71b0\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is (without -w -r flag)")]),e._v("\n./cadence workflow showid 3ea6b242-b23c-4279-bb13-f215661b4717 866ae14c-88cf-4f1e-980f-571e031d71b0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if run_id is not provided, it will show the latest run history of that workflow_id")]),e._v("\n./cadence workflow show -w 3ea6b242-b23c-4279-bb13-f215661b4717\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is")]),e._v("\n./cadence workflow showid 3ea6b242-b23c-4279-bb13-f215661b4717\n")])])]),a("h4",{attrs:{id:"show-workflow-execution-information"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show-workflow-execution-information"}},[e._v("#")]),e._v(" Show workflow execution information")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow describe -w 3ea6b242-b23c-4279-bb13-f215661b4717 -r 866ae14c-88cf-4f1e-980f-571e031d71b0\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is (without -w -r flag)")]),e._v("\n./cadence workflow describeid 3ea6b242-b23c-4279-bb13-f215661b4717 866ae14c-88cf-4f1e-980f-571e031d71b0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if run_id is not provided, it will show the latest workflow execution of that workflow_id")]),e._v("\n./cadence workflow describe -w 3ea6b242-b23c-4279-bb13-f215661b4717\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut of this is")]),e._v("\n./cadence workflow describeid 3ea6b242-b23c-4279-bb13-f215661b4717\n")])])]),a("h4",{attrs:{id:"list-closed-or-open-workflow-executions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-closed-or-open-workflow-executions"}},[e._v("#")]),e._v(" List closed or open workflow executions")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow list\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# default will only show one page, to view more items, use --more flag")]),e._v("\n./cadence workflow list -m\n")])])]),a("p",[e._v("Use "),a("strong",[e._v("--query")]),e._v(" to list "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(" with SQL like "),a("Term",{attrs:{term:"query",show:""}})],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow list --query "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"WorkflowType='main.SampleParentWorkflow' AND CloseTime = missing \"")]),e._v("\n")])])]),a("p",[e._v("This will return all open "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(' with workflowType as "main.SampleParentWorkflow".')],1),e._v(" "),a("h4",{attrs:{id:"query-workflow-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-workflow-execution"}},[e._v("#")]),e._v(" Query workflow execution")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# use custom query type")]),e._v("\n./cadence workflow query -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --qt "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("query-type"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# use build-in query type "__stack_trace" which is supported by Cadence client library')]),e._v("\n./cadence workflow query -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --qt __stack_trace\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a shortcut to query using __stack_trace is (without --qt flag)")]),e._v("\n./cadence workflow stack -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("h4",{attrs:{id:"signal-cancel-terminate-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signal-cancel-terminate-workflow"}},[e._v("#")]),e._v(" Signal, cancel, terminate workflow")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# signal")]),e._v("\n./cadence workflow signal -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("signal-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\"signal-value\"'")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# cancel")]),e._v("\n./cadence workflow cancel -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# terminate")]),e._v("\n./cadence workflow terminate -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason\n")])])]),a("p",[e._v("Terminating a running "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(" will record a WorkflowExecutionTerminated "),a("Term",{attrs:{term:"event"}}),e._v(" as the closing "),a("Term",{attrs:{term:"event"}}),e._v(" in the history. No more "),a("Term",{attrs:{term:"decision_task",show:"decision_tasks"}}),e._v(" will be scheduled for a terminated "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(".\nCanceling a running "),a("Term",{attrs:{term:"workflow_execution"}}),e._v(" will record a WorkflowExecutionCancelRequested "),a("Term",{attrs:{term:"event"}}),e._v(" in the history, and a new "),a("Term",{attrs:{term:"decision_task"}}),e._v(" will be scheduled. The "),a("Term",{attrs:{term:"workflow"}}),e._v(" has a chance to do some clean up work after cancellation.")],1),e._v(" "),a("h4",{attrs:{id:"signal-cancel-terminate-workflows-as-a-batch-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#signal-cancel-terminate-workflows-as-a-batch-job"}},[e._v("#")]),e._v(" Signal, cancel, terminate workflows as a batch job")]),e._v(" "),a("p",[e._v("Batch job is based on List Workflow Query("),a("strong",[e._v("--query")]),e._v("). It supports "),a("Term",{attrs:{term:"signal"}}),e._v(", cancel and terminate as batch job type.\nFor terminating "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(" as batch job, it will terminte the children recursively.")],1),e._v(" "),a("p",[e._v("Start a batch job(using "),a("Term",{attrs:{term:"signal"}}),e._v(" as batch type):")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cadence --do samples-domain wf batch start --query "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"WorkflowType='main.SampleParentWorkflow' AND CloseTime=missing\"")]),e._v(" --reason "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test"')]),e._v(" --bt signal --sig testname\nThis batch job will be operating on "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" workflows.\nPlease confirm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Yes/No"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(":yes\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"jobID"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"<batch-job-id>"')]),e._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"msg"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"batch job is started"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n")])])]),a("p",[e._v("You need to remember the JobID or use List command to get all your batch jobs:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cadence --do samples-domain wf batch list\n")])])]),a("p",[e._v("Describe the progress of a batch job:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cadence --do samples-domain wf batch desc -jid "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("batch-job-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("Terminate a batch job:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("cadence --do samples-domain wf batch terminate -jid "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("batch-job-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("Note that the operation performed by a batch will not be rolled back by terminating the batch. However, you can use reset to rollback your "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(".")],1),e._v(" "),a("h4",{attrs:{id:"restart-reset-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restart-reset-workflow"}},[e._v("#")]),e._v(" Restart, reset workflow")]),e._v(" "),a("p",[e._v("The Reset command allows resetting a "),a("Term",{attrs:{term:"workflow"}}),e._v(" to a particular point and continue running from there.\nThere are a lot of use cases:")],1),e._v(" "),a("ul",[a("li",[e._v("Rerun a failed "),a("Term",{attrs:{term:"workflow"}}),e._v(" from the beginning with the same start parameters.")],1),e._v(" "),a("li",[e._v("Rerun a failed "),a("Term",{attrs:{term:"workflow"}}),e._v(" from the failing point without losing the achieved progress(history).")],1),e._v(" "),a("li",[e._v("After deploying new code, reset an open "),a("Term",{attrs:{term:"workflow"}}),e._v(" to let the "),a("Term",{attrs:{term:"workflow"}}),e._v(" run to different flows.")],1)]),e._v(" "),a("p",[e._v("You can reset to some predefined "),a("Term",{attrs:{term:"event"}}),e._v(" types:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow reset -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reset_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("reset_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),a("ul",[a("li",[e._v("FirstDecisionCompleted: reset to the beginning of the history.")]),e._v(" "),a("li",[e._v("LastDecisionCompleted: reset to the end of the history.")]),e._v(" "),a("li",[e._v("LastContinuedAsNew: reset to the end of the history for the previous run.")])]),e._v(" "),a("p",[e._v("If you are familiar with the Cadence history "),a("Term",{attrs:{term:"event"}}),e._v(", You can also reset to any "),a("Term",{attrs:{term:"decision"}}),e._v(" finish "),a("Term",{attrs:{term:"event"}}),e._v(" by using:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow reset -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("wid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" -r "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("rid"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --event_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("decision_finish_event_id"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),a("p",[e._v("Some things to note:")]),e._v(" "),a("ul",[a("li",[e._v("When reset, a new run will be kicked off with the same workflowID. But if there is a running execution for the workflow(workflowID), the current run will be terminated.")]),e._v(" "),a("li",[e._v("decision_finish_event_id is the ID of "),a("Term",{attrs:{term:"event",show:"events"}}),e._v(" of the type: DecisionTaskComplete/DecisionTaskFailed/DecisionTaskTimeout.")],1),e._v(" "),a("li",[e._v("To restart a "),a("Term",{attrs:{term:"workflow"}}),e._v(" from the beginning, reset to the first "),a("Term",{attrs:{term:"decision_task"}}),e._v(" finish "),a("Term",{attrs:{term:"event"}}),e._v(".")],1)]),e._v(" "),a("p",[e._v("To reset multiple "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(", you can use batch reset command:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence workflow reset-batch --input_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("file_of_workflows_to_reset"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reset_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("reset_type"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --reason "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"some_reason"')]),e._v("\n")])])]),a("h4",{attrs:{id:"recovery-from-bad-deployment-auto-reset-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recovery-from-bad-deployment-auto-reset-workflow"}},[e._v("#")]),e._v(" Recovery from bad deployment -- auto-reset workflow")]),e._v(" "),a("p",[e._v("If a bad deployment lets a "),a("Term",{attrs:{term:"workflow"}}),e._v(" run into a wrong state, you might want to reset the "),a("Term",{attrs:{term:"workflow"}}),e._v(" to the point that the bad deployment started to run. But usually it is not easy to find out all the "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(" impacted, and every reset point for each "),a("Term",{attrs:{term:"workflow"}}),e._v(". In this case, auto-reset will automatically reset all the "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(" given a bad deployment identifier.")],1),e._v(" "),a("p",[e._v("Let's get familiar with some concepts. Each deployment will have an identifier, we call it \""),a("strong",[e._v("Binary Checksum")]),e._v('" as it is usually generated by the md5sum of a binary file. For a '),a("Term",{attrs:{term:"workflow"}}),e._v(", each binary checksum will be associated with an "),a("strong",[e._v("auto-reset point")]),e._v(", which contains a "),a("strong",[e._v("runID")]),e._v(", an "),a("strong",[e._v("eventID")]),e._v(", and the "),a("strong",[e._v("created_time")]),e._v(" that binary/deployment made the first "),a("Term",{attrs:{term:"decision"}}),e._v(" for the "),a("Term",{attrs:{term:"workflow"}}),e._v(".")],1),e._v(" "),a("p",[e._v("To find out which "),a("strong",[e._v("binary checksum")]),e._v(" of the bad deployment to reset, you should be aware of at least one "),a("Term",{attrs:{term:"workflow"}}),e._v(" running into a bad state. Use the describe command with "),a("strong",[e._v("--reset_points_only")]),e._v(" option to show all the reset points:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence wf desc -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("WorkflowID"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  --reset_points_only\n+----------------------------------+--------------------------------+--------------------------------------+---------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("         BINARY CHECKSUM          "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("          CREATE TIME           "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("                RUNID                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" EVENTID "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n+----------------------------------+--------------------------------+--------------------------------------+---------+\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" c84c5afa552613a83294793f4e664a7f "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("-05-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":01:00.398455019  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" 2dd29ab7-2dd8-4668-83e0-89cae261cfb1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" aae748fdc557a3f873adbe1dd066713f "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2019")]),e._v("-05-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("11")]),e._v(":01:00.067691445  "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" d42d21b8-2adb-4313-b069-3837d44d6ce6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),a("p",[e._v("Then use this command to tell Cadence to auto-reset all "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(" impacted by the bad deployment. The command will store the bad binary checksum into "),a("Term",{attrs:{term:"domain"}}),e._v(" info and trigger a process to reset all your "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),e._v(".")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("./cadence --do "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("YourDomainName"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" domain update --add_bad_binary aae748fdc557a3f873adbe1dd066713f  --reason "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rollback bad deployment"')]),e._v("\n")])])]),a("p",[e._v("As you add the bad binary checksum to your "),a("Term",{attrs:{term:"domain"}}),e._v(", Cadence will not dispatch any "),a("Term",{attrs:{term:"decision_task",show:"decision_tasks"}}),e._v(" to the bad binary. So make sure that you have rolled back to a good deployment(or roll out new bits with bug fixes). Otherwise your "),a("Term",{attrs:{term:"workflow"}}),e._v(" can't make any progress after auto-reset.")],1)])}),[],!1,null,null,null);t.default=s.exports}}]);