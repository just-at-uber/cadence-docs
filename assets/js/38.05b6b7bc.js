(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{422:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"starting-workflow-executions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#starting-workflow-executions"}},[t._v("#")]),t._v(" Starting workflow executions")]),t._v(" "),a("p",[t._v("A "),a("Term",{attrs:{term:"workflow"}}),t._v(" interface that executes a "),a("Term",{attrs:{term:"workflow"}}),t._v(" requires initializing a "),a("code",[t._v("WorkflowClient")]),t._v(" instance, creating\na client side stub to the "),a("Term",{attrs:{term:"workflow"}}),t._v(", and then calling a method annotated with @WorkflowMethod.")],1),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowClient")]),t._v(" workflowClient "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cadenceServiceHost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cadenceServicePort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Create a workflow stub.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileProcessingWorkflow")]),t._v(" workflow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workflowClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newWorkflowStub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileProcessingWorkflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("There are two ways to start "),a("Term",{attrs:{term:"workflow_execution",show:""}}),t._v(" asynchronously and synchronously. Asynchronous start initiates a "),a("Term",{attrs:{term:"workflow_execution"}}),t._v(" and immediately returns to the caller. This is the most common way to start "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),t._v(" in production code. Synchronous invocation starts a "),a("Term",{attrs:{term:"workflow"}}),t._v("\nand then waits for its completion. If the process that started the "),a("Term",{attrs:{term:"workflow"}}),t._v(" crashes or stops waiting, the "),a("Term",{attrs:{term:"workflow"}}),t._v(" continues executing.\nBecause "),a("Term",{attrs:{term:"workflow",show:"workflows"}}),t._v(" are potentially long running, and crashes of clients happen, this is not very commonly found in production use.")],1),t._v(" "),a("p",[t._v("Asynchronous start:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns as soon as the workflow starts.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowExecution")]),t._v(" workflowExecution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowClient")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workflow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workflowArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Started process file workflow with workflowId=\\""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" workflowExecution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getWorkflowId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\" and runId=\\""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" workflowExecution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRunId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Synchronous start:")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Start a workflow and then wait for a result.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note that if the waiting process is killed, the workflow will continue execution.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workflow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workflowArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("If you need to wait for a "),a("Term",{attrs:{term:"workflow"}}),t._v(" completion after an asynchronous start, the most straightforward way\nis to call the blocking version again. If "),a("code",[t._v("WorkflowOptions.WorkflowIdReusePolicy")]),t._v(" is not "),a("code",[t._v("AllowDuplicate")]),t._v(", then instead\nof throwing "),a("code",[t._v("DuplicateWorkflowException")]),t._v(", it reconnects to an existing "),a("Term",{attrs:{term:"workflow"}}),t._v(" and waits for its completion.\nThe following example shows how to do this from a different process than the one that started the "),a("Term",{attrs:{term:"workflow"}}),t._v(". All this process\nneeds is a "),a("code",[t._v("WorkflowID")]),t._v(".")],1),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowExecution")]),t._v(" execution "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WorkflowExecution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setWorkflowId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workflowId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileProcessingWorkflow")]),t._v(" workflow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workflowClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newWorkflowStub")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("execution"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Returns result potentially waiting for workflow to complete.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workflow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workflowArgs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);